<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="sec-GraphR" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Graphing with R</title>
  <p> In this section we will learn how to do serveral common graphs with R Studio. The commands are the same for R. We will be using R Studio since it has a friendlier interface for beginners. </p>
<objectives>
  <introduction>
    <p> At the end of this section you will able to:  </p>
  </introduction>
  <ol>
    <li> <p> Use R Studio to graph boxplots and histograms. </p>  </li>
    <li> <p> Use R Studio to construct bar graphs and circle graphs. </p> </li>
    <li> <p> Use R Studio to construct scatterplots. </p> </li>
  </ol>
</objectives>


<p> First, add the <term>Lesson 1 Graphing </term> text file to your <c>Using R Files </c> folder and the <url href="external/sheets/Cereal.csv"> Cereal.csv </url>  dataset. </p>
<p> You may need to link your <term> Using R Files</term> folder with the working directory, to do this go to the bottom right panel and under the <c>Files</c> tab click on the triple dots <c> â€¦ </c> on the far right to locate your folder and click <c>Open</c>. You should now see the Lesson 1 file and the Cereal datafile in the bottom right panel. Click on the Lesson 1 and it opens in the top left panel so you can copy the R code or you can type it directly in the bottom left panel. </p>
<p> Next, you will need to import the data file by clicking on the file and select <c>Import Dataset</c>, a new window will open to give you a preview of the spreadsheet and then click on the <c>Import</c> button at the bottom right. Once it is loaded into R Studio (you will see it in the top left panel), in the bottom left panel type <term> attach(Cereal) </term> so  you can call up the variable names. </p>
<p> Now we are all set to start graphing the data. For each scenario, we will start with the most basic graph and then add some aesthetics, such as titles and colors. </p>

<subsection xml:id="subsec-Boxplots">
    <title>Boxplots </title>
   
<p> Let's begin with boxplots, which split the data into four sections so we can see the spread of the values. We will first analyze the number of calories in each serving of cereal. Type the following command in the bottom left corner. This will construct a vertical boxplot.  The graphs will show up in the bottom right panel of R Studio. </p>
<p> <c> boxplot(Calories) </c>	</p>
<figure xml:id="BoxCalorie">
            <caption>Image of Vertical Boxplot</caption>
            <image source="Rgraph1.png" width="80%">
                <shortdescription>Boxplot with values from 80 to 214.</shortdescription>
            </image>
        </figure> 
<p> <em> Interpreting the Boxplot:</em> The boxplot shows the smallest value at 80 and the largest is 214 (which is unclear on the graph), this gives the range of 214 - 80 = 134 for the total spread. The box represents the quartiles values around 115 and 160 (actual are Q1= 113.2 and Q3 = 160). The box represents the middle 50% of the data values. The interquartile range = Q3-Q1 =160-113.2 =  46.8. The thick line in the middle is the median = 118 .  To calculate the actual values use the <em> summary </em> command with the variable name. </p>
<p> <c> summary(Calories) </c> </p> 
<figure xml:id="SummaryCalorie">
            <caption>Image of summary output</caption>
            <image source="Rgraph2.png" width="80%">
                <shortdescription>summary values of min =80, Q1=113.2, Median=118, Q3=160, Max=214.</shortdescription>
            </image>
        </figure> 

<p> Now let's add a label along the x-axis and make the boxplot horizontal.	</p>			
<p> <c> boxplot(Calories,horizontal = TRUE,xlab = "Calories per Serving") </c></p>
<p> With the horizontal boxplot it is easier to see the right skewness of the data and it is easier to read the quartile values. </p>
 <figure xml:id="BoxHorzCalorie">
            <caption>Image of horizontal boxplot</caption>
            <image source="Rgraph3.png" width="80%">
                <shortdescription>horizontal boxplot with values from 80 to 214.</shortdescription>
            </image>
        </figure> 
 
<p> Suppose we want to organize the boxplot by the company that produces each brand of cereal. We will identify the numerical variable first, then the Tilda symbol <c> ~ </c> followed by the categorical variable. </p>		
<p> <c> boxplot(Calories~Company) </c>	</p>	
<figure xml:id="BoxplotbyCompany">
            <caption>Image of comparing boxplots</caption>
            <image source="Rgraph4.png" width="80%">
                <shortdescription> Boxplot for each company.</shortdescription>
            </image>
        </figure> 
<p> <em> Comparing Boxplots: </em> With the three boxplots we can see that Company G has an outlier at the top, Company G and K have similar median values while company Q has a larger median. Company Q is more symmetric while Company G and K are skewed. </p> 

<p> Next we will add some color to the graph for fun and give the graph a main title. But investigate the amount of fat in each serving. The boxplot is right skewed with several outliers on the right. </p>
<p> <c> boxplot(Fat,horizontal = TRUE, col='blue', border='red',main="Fat Content") </c> </p>
<figure xml:id="BoxplotColor">
            <caption>Image of Fat Content Boxplot</caption>
            <image source="Rgraph5.png" width="80%">
                <shortdescription> Boxplot with colors.</shortdescription>
            </image>
        </figure> 
<p>     </p> 
  <p>     </p> 
</subsection>
<!--note maybe change colors on boxplot to read easier -->

<subsection xml:id="subsec-Histograms">
    <title>Histograms </title>
   
<p> Now let us explore the amount of sugar per serving by looking at the shape of the distribution with a histogram. </p>
<p>  <c> hist(Sugars) </c> </p>
<figure xml:id="HistoSugar">
            <caption>Image of histogram</caption>
            <image source="Rgraph6.png" width="80%">
                <shortdescription> Histogram of sugar content.</shortdescription>
            </image>
        </figure> 
<p> The default for a range of 20 is 4 rectangles with a width of 5 grams for each interval. Most cereals have between 10 and 15 grams of sugar per serving. With just four rectangles, it can be difficult to describe the shape of the distribution. </p> 

<p> Suppose we want to adjust the number of bars in the histogram, we do this by identifying the number of <em> breaks </em> we want. Suppose we want 10 bars instead of the default of four. </p>
<p>  <c> hist(Sugars,breaks=10) </c>	</p>
<figure xml:id="HistoSugar2">
            <caption>Image of histogram</caption>
            <image source="Rgraph7.png" width="80%">
                <shortdescription> Histogram of sugar content with 10 bars.</shortdescription>
            </image>
        </figure>
<p> This histogram has 10 bars showing more variation in the amount of sugar per serving. This distribution is bimodal.</p> 

<p> Next, let us investigate the amount of sodium in each serving and add some labels to the axes and give the graph a main title. </p>			
<p>  <c> hist(Sodium,breaks=7,xlab='Sodium Content (mg)',ylab='Frequency',main='Histogram for Sodium Content') </c> </p>
<figure xml:id="HistoSodium">
            <caption>Image of histogram for sodium</caption>
            <image source="Rgraph8.png" width="80%">
                <shortdescription> Histogram of sodium content.</shortdescription>
            </image>
        </figure>
<p> This histogram has nine intervals for the sodium content per serving. The histograms shows a peak at 200 to 250 milligrams of sodium and is more symmetric and bell shaped than the other histograms. </p> 
</subsection>


<subsection xml:id="subsec-Categorical">
    <title>Categorical Graphs</title>
    
<p>      </p> 
<p> <term> Frequency Table </term> </p>
<p> To construct graphs for categorical data we first need to create a table of the frequencies from the raw data. We will use the <em> table </em> command for the variable Company. </p>
<p>  <c> table(Company) </c> </p>
<p> Notice that the categories are G, K and Q. Next we will create a vector I'm calling Brand to create the labels for our future graph using the full company names. Then we will create a Totals vector to list the summarized frequencies. It is important to keep them in the same order.  </p>
<p> <c>  Brand </c> <m>\lt-</m> <c> c('General Mills', 'Kelloggs',  'Quacker') </c> </p>
<p>  <c> Totals</c> <m>\lt-</m> <c> c(13,11,6) </c> </p>
<p>        </p> 
<!-- Warning: There needs to be a left pointing arrow before the dashed sign which PreTeXt does not like.-->

<p> <term> Pie Graph </term> </p>
<p> Now we can construct a simple pie graph for the proportion of cereals by each company. We are listing the numerical Totals first, and the <em>labels </em> = Brand names were created. </p>
<p>  <c> pie(Totals, labels=Brand) </c> </p>
<p> Next let us add some brighter colors to the graph and give it a main title. </p>
<p>  <c>  pie(Totals, labels=Brand, col=rainbow(3), main='Pie Chart of Cereal Companies') </c> </p>

<p> <term> Bar Graph </term> </p>
<p> Now we can construct a simple bar graph for the frequency of cereals by each company. We are listing the numerical Totals first, and the <em>names.arg </em> = Brand names were created. </p>
<p>  <c>   barplot(Totals, names.arg=Brand) </c> </p>
<p> Next let us add some brighter colors to the graph and give the graph a main title and label the x-axis. </p>
<p>  <c>   barplot(Totals, names.arg=Brand, cex.names=0.8, col=rainbow(3), xlab='Cereal Brands', ylab='Frequency', main='Bar Graph of Cereal Companies') </c> </p>
</subsection>

<subsection xml:id="subsec-Scatterplots">
    <title>Scatterplots</title>
    
<p> <term> Scatterplots </term> </p>
<p> Now let us construct a simple scatterplot to show the relationship between two quantitative variables. We will use the <em> plot </em> command and identify the x-variable first and then the y-variable. </p>
<p> <c> plot(Fat,Carbs) </c> </p>	
<p> To add at title to the graph we add the <em> main=</em> to the command with the title in quotes. </p>			
<p> <c> plot(Fat,Carbs,main='Scatterplot of Fat Content and Carbohydrates') </c> </p>	
<p>  To find the linear correlation coefficient we use the <em> cor </em> command and identify the x-variable first, and then the y-variable. The correlation value should match our scatterplot for how tightly the points form a line. If we see a positive trend in the graph, then the correlation coefficient value will also be positive, and if we see a negative trend in the scatter plot we would expect the correlation value to be negative. </p>			 
<p> <c> cor(Fat,Carbs)   </c> </p>                               
</subsection>


<p> <term> Quantile Plots </term> </p>
<p> We often look at the shape of the histogram to help us determine if a variable is approximately normal. We can also check the quantile plot which graphs the z-value with the data values. If the quantile plot forms a line it lets us know the variable is approximately normal. If the graph is curved it is typically not normally distribution. We will use the <em> qqnorm </em> command for the quantile plot. We can add the <em> qqline </em> command afterwards to draw a line through the data to see if it appears linear. </p>
<p> <c> qqnorm(Calories) </c> </p>
<p> <c> qqline(Calories) </c> </p>



</section>
